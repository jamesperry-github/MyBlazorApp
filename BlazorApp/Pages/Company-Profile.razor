@page "/stock/{param?}";

@using BlazorApp.Data.Controllers;
@using BlazorApp.Data.Models.finhub.Company;
@using BlazorApp.Data.Models.alphaVantage.Company;
@inject NavigationManager NavManager;
@inject FinhubController finhub;
@inject AlphaVantageController alphaVantage;
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>

@if(company == null)
{
    
} else
{
<header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
  <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3 fs-6" href="#">@company.ticker</a>
  <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
  <input class="form-control form-control-dark w-100 rounded-0 border-0" type="text" placeholder="Search" aria-label="Search" onchange="@Search">
  @*<div class="navbar-nav">
    <div class="nav-item text-nowrap">
      <a class="nav-link px-3" href="#">Sign out</a>
    </div>
  </div>*@
</header>

<div class="container-fluid">
  <div class="row">
    <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
      <div class="position-sticky pt-3 sidebar-sticky">
        <ul class="nav flex-column">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="#">
              <span data-feather="home" class="align-text-bottom"></span>
              Dashboard
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="file" class="align-text-bottom"></span>
              Orders
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="shopping-cart" class="align-text-bottom"></span>
              Products
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="users" class="align-text-bottom"></span>
              Customers
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="bar-chart-2" class="align-text-bottom"></span>
              Reports
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="layers" class="align-text-bottom"></span>
              Integrations
            </a>
          </li>
        </ul>

        <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted text-uppercase">
          <span>Saved reports</span>
          <a class="link-secondary" href="#" aria-label="Add a new report">
            <span data-feather="plus-circle" class="align-text-bottom"></span>
          </a>
        </h6>
        <ul class="nav flex-column mb-2">
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="file-text" class="align-text-bottom"></span>
              Current month
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="file-text" class="align-text-bottom"></span>
              Last quarter
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="file-text" class="align-text-bottom"></span>
              Social engagement
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <span data-feather="file-text" class="align-text-bottom"></span>
              Year-end sale
            </a>
          </li>
        </ul>
      </div>
    </nav>

    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
      
        @if(candles == null && timeSeries == null)
        {
    
        } else
        {
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">@company.name</h1>
            <div class="btn-toolbar mb-2 mb-md-0">
                <div class="btn-group me-2">
                    <button type="button" class="btn btn-sm btn-outline-secondary">Share</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary">Export</button>
                </div>
                @*DATE DROPDOWN*@
                <select name="times" id="times" class="btn btn-sm btn-outline-secondary dropdown-toggle" @onchange="reDrawChart" value=@datePick>
                    @foreach (var template in templates)
                    {
                        <option value=@template>@template</option>
                    }
                </select>
                @*DATE DROPDOWN*@
            </div>
        </div>

        <div id="chart_div" style="width: 100%; height: 500px;"></div>
        }

      <h2>Financials</h2>
      <div class="table-responsive">
        <table class="table table-striped table-sm">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">Header</th>
              <th scope="col">Header</th>
              <th scope="col">Header</th>
              <th scope="col">Header</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1,001</td>
              <td>random</td>
              <td>data</td>
              <td>placeholder</td>
              <td>text</td>
            </tr>
            <tr>
              <td>1,002</td>
              <td>placeholder</td>
              <td>irrelevant</td>
              <td>visual</td>
              <td>layout</td>
            </tr>
            <tr>
              <td>1,003</td>
              <td>data</td>
              <td>rich</td>
              <td>dashboard</td>
              <td>tabular</td>
            </tr>
            <tr>
              <td>1,003</td>
              <td>information</td>
              <td>placeholder</td>
              <td>illustrative</td>
              <td>data</td>
            </tr>
            <tr>
              <td>1,004</td>
              <td>text</td>
              <td>random</td>
              <td>layout</td>
              <td>dashboard</td>
            </tr>
            <tr>
              <td>1,005</td>
              <td>dashboard</td>
              <td>irrelevant</td>
              <td>text</td>
              <td>placeholder</td>
            </tr>
          </tbody>
        </table>
      </div>
    </main>
  </div>
</div>
}

@code {
    [Parameter]
    public string? Param { get; set; }
    public string _Param;
    private CompanyInfo company;
    private CompanyFinancials financials;
    private CompanyQuote quote;
    private CompanyCandles candles;
    private List<string> templates = new List<string>() { "Day", "Week", "Month", "Year", "All" };
    // TODO: store weekly, monthly & yearly in memory 
    private List<TimeSeries> timeSeries;
    private string datePick = "Day";

    protected async override Task OnInitializedAsync()
    {
        _Param = Param;
        // --- Company Info
        company = await finhub.GetCompanyInfo(Param);
        // --- Company Financials
        //financials = await finhub.GetCompanyFinancials(Param);
        // --- Company Quote
        //financials = await finhub.GetCompanyQuote(Param);
        // --- Company Candles... FROM=1641089347 & TO=1665623347... set to weekly report initially
        //candles = await finhub.GetCompanyCandles(Param, ConvertToUnix(DateTime.Now.AddHours(-168)), ConvertToUnix(DateTime.Now));
        //candles = await finhub.GetCompanyCandles(Param, 1641089347, ConvertToUnix(DateTime.Now));
        timeSeries = await alphaVantage.GetDailyTimeSeries(Param, datePick);
        //storeData();

        // --- TESTING
        //finhub.test(Param);
        //await JS.InvokeAsync<string>("saveToSessionStorage");
        StateHasChanged();
    }

    protected async override void OnParametersSet()
    {
        // re-initialize componet when url param is udpated
        if (_Param != Param)
        {
            _Param = Param;
            datePick = "Day";
            await OnInitializedAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        drawChart();
    }

    private async void reDrawChart(ChangeEventArgs e)
    {
        datePick = e.Value.ToString();
        timeSeries = null;
        switch (datePick)
        {
            case "Day":
                timeSeries = await alphaVantage.GetDailyTimeSeries(Param, datePick);
                StateHasChanged();
                return;
            case "Week":
                timeSeries = await alphaVantage.GetTimeSeries(Param, datePick);
                StateHasChanged();
                return;
            case "Month":
                timeSeries = await alphaVantage.GetTimeSeries(Param, datePick);
                StateHasChanged();
                return;
            case "Year":
                timeSeries = await alphaVantage.GetTimeSeries(Param, datePick);
                StateHasChanged();
                return;
            case "All":
                timeSeries = await alphaVantage.GetTimeSeries(Param, datePick);
                StateHasChanged();
                return;
            default:
                return;
        }
    }

    private void drawChart()
    {
        JS.InvokeVoidAsync("drawChart", timeSeries, datePick);
    }

    private long ConvertToUnix(DateTime date)
    {
        long unixTime = ((DateTimeOffset)date).ToUnixTimeSeconds();
        return unixTime;
    }

    private async void Search(ChangeEventArgs e)
    {
        // TODO: reset form value
        NavManager.NavigateTo($"/stock/{e.Value}");
    }
}